openapi: 3.0.0
info:
  title: Users-Manager
  version: '1.0'
  contact:
    name: Valentin Dufois
    email: vdufois@neo-ooh.com
  description: 'The Users Manager API handles all operations related to the users, their capabilities and more. Information inside this API are central to all Neo services  '
servers:
  - url: 'https://api.users.neo-ooh.info'
    description: prod
  - url: 'https://dev.api.users.neo-ooh.info'
    description: dev
paths:
  /users:
    get:
      summary: 'List all users the current user can see '
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
        '409':
          description: 'Conflict: A user with the same email is already registered.'
      operationId: get-all-users
      description: Returns all the users. The returned list depends on who is logged in what users it can access.
      tags:
        - users
    post:
      summary: Create a new user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/User.v1.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: 'Conflict: Provided user email is already used'
      operationId: create-new-user
      description: Creates a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                parent:
                  type: integer
                branding:
                  type: integer
                roles:
                  type: array
                  items:
                    type: integer
                capabilities:
                  type: array
                  items:
                    type: integer
              required:
                - name
                - email
                - parent
                - branding
        description: Information about the new user
  '/users/{user-id}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        description: A user ID
        required: true
    get:
      summary: Give information about the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/User.v1.yaml
      operationId: get-users
      parameters: []
      description: Returns available informations about the users. The user capabilities are not included in this endpoint.
      tags:
        - users
    put:
      summary: Updates the user informations
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
        '409':
          description: 'Conflict: Trying to set a user email already taken'
      operationId: update-user
      description: Updates the user information
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/User.v1.yaml
        description: An updated version of a user information with its
    delete:
      summary: Remove the user
      tags: []
      responses:
        '200':
          description: 'OK: User has been removed'
        '401':
          description: Unauthorized
      operationId: delete-user
      description: Delete the user. Send a request to registered other APIs to propagate the removal
  '/users/{user-id}/capabilities':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
        description: A user ID
    get:
      summary: Gives the user's capabilities
      tags:
        - capabilities
        - users
      responses:
        '200':
          description: |-
            OK

            if flattened, no roles will be returneed, and all user capabilities through roles will be put in the capabilities array
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: ../models/Role.v1.yaml
                  capabilities:
                    type: array
                    items:
                      $ref: ../models/Capability.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-user-capabilities
      description: Gives the list of all the capabilities of a user
      parameters:
        - schema:
            type: boolean
            default: 'true'
          in: query
          name: flat
          description: 'If set, the capabilities are returned flattened, without any role information'
          allowEmptyValue: true
    put:
      summary: Updates the user's capabilities
      operationId: update-user-capabilities
      responses:
        '200':
          description: |-
            OK

            Returns the list of all the user standalone capabilities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Capability.v1.yaml
      description: Updates the user capabilities
      requestBody:
        content:
          application/json:
            schema:
              type: array
              uniqueItems: true
              minItems: 0
              description: Array of capabilities ID
              items:
                type: integer
        description: 'ID of the capabilities to apply the user. If a user has a statndalone capability that is missing from this list, it will be removed fromn the user.'
      tags:
        - Users
  '/users/{user-id}/activity':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
    get:
      summary: List a user's activity history
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  activities:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/Activity'
                  next:
                    type: string
                    format: uri
                    example: 'http://{domain}/users/{user-id}/activity?offset={auto}&limit={request-limit}'
                required:
                  - activities
                  - next
      operationId: get-user-activity
      description: Gives records from the user activity history. This endpoint support pagination with the `limit` and `offset` query parameters
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: How many records should be skipped before returning results
        - schema:
            type: integer
            default: 25
          in: query
          name: limit
          description: How many activity records should be returned at most
      tags:
        - users
        - activities
    post:
      summary: Register an activity on the user history
      tags: []
      responses:
        '201':
          description: Created
        '400':
          description: 'Bad Request: Provided information do not match to create a correct activity record'
        '401':
          description: Unauthorized
      operationId: post-user-activity
      description: Register an activity to the user's history
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
                type:
                  type: string
                user_id:
                  type: integer
                library_id:
                  type: integer
                ad_id:
                  type: integer
                campaign_id:
                  type: integer
                review_id:
                  type: integer
              required:
                - service
                - type
        description: The body needs to provides the necessary details to properly link the activity records to actual content
  '/users/{user-id}/roles':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
        description: A user ID
    get:
      summary: Get all the roles of a user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Role.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-user-roles
      description: List all the roles of the specified user
      tags:
        - users
        - capabilities
        - roles
    put:
      summary: Updates the list of roles of a user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Role.v1.yaml
        '400':
          description: 'Bad Request: Bad role ID'
        '401':
          description: Unauthorized
      operationId: update-user-roles
      description: Updates the roles of a user
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
        description: 'List of roles ID for the usser. If a role of the user is missing fromn the body, it will be removed from the user.'
  /capabilities:
    get:
      summary: List all available capabilities
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Capability.v1.yaml
      operationId: get-capabilities
      description: Returns all available capabilities
      parameters:
        - schema:
            type: boolean
          in: query
          name: standalone
          description: 'If present, returns only standalone capabilities'
          allowEmptyValue: true
    parameters: []
    put:
      summary: Update capability's properties
      operationId: update-capability
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Capability.v1.yaml
        '401':
          description: Unauthorized
      parameters:
        - schema:
            type: integer
          in: query
          name: capability
          description: Unique ID of the concerned capability
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                default:
                  type:
                    - string
                    - number
                    - boolean
                standalone:
                  type: boolean
        description: Include properties of the capability you want to update
      description: Updates the capability's default value and its standalone property
      tags:
        - capabilities
  /roles:
    get:
      summary: List all available roles
      tags:
        - roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Role.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-roles
      description: Gives all the available roles
    post:
      summary: Create a new role
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Role.v1.yaml
        '401':
          description: Unauthorized
      operationId: post-roles
      description: Register a new role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the new role
                desc:
                  type: string
                  description: 'Short description '
                capabilities:
                  type: array
                  description: All the capabilities included in the role
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: Valid ID of a capability to include in the role
                      value:
                        type:
                          - string
                          - number
                          - boolean
                        description: Value for the capability in this role
                    required:
                      - id
              required:
                - name
                - desc
                - capabilities
        description: Role description and a list of capabilities with values (if applicable) to include
    put:
      summary: Update the specified role
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Role.v1.yaml
        '401':
          description: Unauthorized
      operationId: update-role
      description: 'Update a role, including its name, description and included capabilities with their values (if applicable)'
      parameters:
        - schema:
            type: integer
          in: query
          name: role
          description: ID of the role to update
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                desc:
                  type: string
                capabilities:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      value:
                        type:
                          - string
                          - number
                          - boolean
                    required:
                      - id
              required:
                - name
                - desc
                - capabilities
        description: ''
    delete:
      summary: Delete the specified role
      tags: []
      responses:
        '200':
          description: 'OK: Removed'
        '401':
          description: Unauthorized
      operationId: delete-role
      parameters:
        - schema:
            type: integer
          in: query
          name: role
          description: ID of the role to remove
      description: 'Deletes a role. If it is applied to a user, its capabilities will not be conserved'
components:
  schemas:
    Activity:
      title: Activity
      type: object
      properties:
        id:
          type: string
        user:
          type: string
        service:
          type: string
        type:
          type: string
        user_id:
          type: string
        library_id:
          type: string
        ad_id:
          type: string
        campaign_id:
          type: string
        review_id:
          type: string
      description: 'An activity represent an action done by a user and formn an history for each user. Once recorded, an activity cannot be removed'
  securitySchemes:
    Authentication:
      type: http
      scheme: bearer
      description: API Token given by the Neo Auth API
tags:
  - name: Users
  - name: capabilities
  - name: users
  - name: activities
  - name: roles
security:
  - Authentication: []
