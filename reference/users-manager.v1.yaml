openapi: 3.0.0
info:
  title: Users-Manager
  version: '1.0'
  contact:
    name: Valentin Dufois
    email: vdufois@neo-ooh.com
  description: 'The Users Manager API handles all operations related to the users, their capabilities and more. Information inside this API are central to all Neo services  '
servers:
  - url: 'https://api.users.neo-ooh.info/v1'
    description: prod
  - url: 'https://dev.api.users.neo-ooh.info/v1'
    description: dev
paths:
  /users:
    get:
      summary: 'List all users the current user can see '
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
        '409':
          description: 'Conflict: A user with the same email is already registered.'
      operationId: get-all-users
      description: Returns all the users. The returned list depends on who is logged in what users it can access.
      tags:
        - users
    post:
      summary: Create a new user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/User.v1.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: 'Conflict: Provided user email is already used'
      operationId: create-new-user
      description: Creates a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                parent:
                  type: integer
                branding:
                  type:
                    - integer
                    - 'null'
                group:
                  type:
                    - integer
                    - 'null'
                roles:
                  type: array
                  items:
                    type: integer
                capabilities:
                  type: array
                  items:
                    type: integer
              required:
                - name
                - email
                - parent
        description: Information about the new user
      tags:
        - users
  '/users/{user-id}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        description: A user ID
        required: true
    get:
      summary: Give information about the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-users
      parameters: []
      description: Returns available informations about the users. The user capabilities are not included in this endpoint.
      tags:
        - users
    put:
      summary: Update the user informations
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
        '409':
          description: 'Conflict: Trying to set a user email already taken'
      operationId: update-user
      description: Updates the user information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                owner:
                  type: integer
                branding:
                  type: integer
                active:
                  type: boolean
                tos_accepted:
                  type: boolean
        description: An updated version of a user information
    delete:
      summary: Remove the user
      tags:
        - users
      responses:
        '200':
          description: 'OK: User has been removed'
        '401':
          description: Unauthorized
      operationId: delete-user
      description: Deletes the user. Send a request to registered other APIs to propagate the removal
  '/users/{user-id}/capabilities':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
        description: A user ID
    get:
      summary: "Get a user's capabilities"
      tags:
        - capabilities
        - users
      responses:
        '200':
          description: |-
            OK

            if flattened, no roles will be returneed, and all user capabilities through roles will be put in the capabilities array
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: ../models/Role.v1.yaml
                  capabilities:
                    type: array
                    items:
                      $ref: ../models/Capability.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-user-capabilities
      description: Gives the list of all the capabilities of a user
      parameters:
        - schema:
            type: boolean
            default: 'true'
          in: query
          name: flat
          description: 'If set, the capabilities are returned flattened, without any role information'
          allowEmptyValue: true
    put:
      summary: "Update a user's capabilities"
      operationId: update-user-capabilities
      responses:
        '200':
          description: |-
            OK

            Returns the list of all the user standalone capabilities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Capability.v1.yaml
        '401':
          description: Unauthorized
      description: Updates the user capabilities
      requestBody:
        content:
          application/json:
            schema:
              type: array
              uniqueItems: true
              minItems: 0
              description: Array of capabilities ID
              items:
                type: integer
        description: 'ID of the capabilities to apply the user. If a user has a statndalone capability that is missing from this list, it will be removed fromn the user.'
      tags:
        - capabilities
        - users
  '/users/{user-id}/activity':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
    get:
      summary: "List a user's activity history"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  activities:
                    type: array
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/Activity'
                  next:
                    type: string
                    format: uri
                    example: 'http://{domain}/users/{user-id}/activity?offset={auto}&limit={request-limit}'
                required:
                  - activities
                  - next
        '400':
          description: 'Bad Request: Are you trying to register an activity for another user ?'
        '401':
          description: Unauthorized
      operationId: get-user-activity
      description: Gives records from the user activity history. This endpoint support pagination with the `limit` and `offset` query parameters
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: How many records should be skipped before returning results
        - schema:
            type: integer
            default: 25
          in: query
          name: limit
          description: How many activity records should be returned at most
      tags:
        - users
        - activities
    post:
      summary: Register an activity on the user history
      tags:
        - users
        - activities
      responses:
        '201':
          description: Created
        '400':
          description: 'Bad Request: Provided information do not match to create a correct activity record'
        '401':
          description: Unauthorized
      operationId: post-user-activity
      description: "Register an activity to the user's history"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
                type:
                  type: string
                user_id:
                  type: integer
                library_id:
                  type: integer
                ad_id:
                  type: integer
                campaign_id:
                  type: integer
                review_id:
                  type: integer
              required:
                - service
                - type
        description: The body needs to provides the necessary details to properly link the activity records to actual content
  '/users/{user-id}/roles':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
        description: A user ID
    get:
      summary: Get all the roles of a user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Role.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-user-roles
      description: List all the roles of the specified user
      tags:
        - users
        - capabilities
        - roles
    put:
      summary: Update the roles of a user
      tags:
        - users
        - roles
        - capabilities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Role.v1.yaml
        '400':
          description: 'Bad Request: Bad role ID'
        '401':
          description: Unauthorized
      operationId: update-user-roles
      description: Updates the roles of a user
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
        description: 'List of roles ID for the user. If a role of the user is missing from the body, it will be removed from the user'
  /capabilities:
    get:
      summary: List all available capabilities
      tags:
        - capabilities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Capability.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-capabilities
      description: Returns all available capabilities
      parameters:
        - schema:
            type: boolean
          in: query
          name: standalone
          description: 'If present, returns only standalone capabilities'
          allowEmptyValue: true
    parameters: []
    put:
      summary: Update a capability properties
      operationId: update-capability
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Capability.v1.yaml
        '401':
          description: Unauthorized
      parameters:
        - schema:
            type: integer
          in: query
          name: capability
          description: Unique ID of the concerned capability
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                default:
                  type:
                    - string
                    - number
                    - boolean
                standalone:
                  type: boolean
        description: Include properties of the capability you want to update
      description: "Updates the capability's default value and its standalone property"
      tags:
        - capabilities
  /roles:
    get:
      summary: List all available roles
      tags:
        - roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Role.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-roles
      description: Gives all the available roles
    post:
      summary: Create a new role
      tags:
        - roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Role.v1.yaml
        '401':
          description: Unauthorized
      operationId: post-roles
      description: Register a new role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the new role
                desc:
                  type: string
                  description: 'Short description '
                capabilities:
                  type: array
                  description: ID of capabilities to include in the role
                  items:
                    type: integer
              required:
                - name
                - desc
                - capabilities
        description: Role description and a list of capabilities with values (if applicable) to include
  /groups:
    get:
      summary: List all available groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Group.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-groups
      description: Gives all the groups available
      tags:
        - groups
    post:
      summary: Create a new group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Group.v1.yaml
        '401':
          description: Unauthorized
      operationId: post-groups
      description: Insert a new group in the database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the new group
                parent:
                  type:
                    - integer
                    - 'null'
                  description: ID of the parent group or null
              required:
                - name
                - parent
        description: A group only needs a name and the ID of a parent group (if applicable) to be created
      tags:
        - groups
  '/groups/{group-id}':
    parameters:
      - schema:
          type: integer
        name: group-id
        in: path
        required: true
        description: ID of the concerned group
    get:
      summary: Get a group details and users
      tags:
        - groups
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: ../models/Group.v1.yaml
                  users:
                    type:
                      - string
                      - array
                    items:
                      $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-group
      description: Gives a group details and the list of users belonging to that group
    put:
      summary: Update a group information
      tags:
        - groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: ../models/Group.v1.yaml
                  users:
                    type:
                      - string
                      - array
                    items:
                      $ref: ../models/User.v1.yaml
        '400':
          description: |-
            Bad Request:
            May be sent for different reasons such as:
            - The group parent ID is erroneous
            - A group cannot have a child group as a parent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message explaining the error
        '401':
          description: Unauthorized
      operationId: update-group
      description: Updates the group name and parent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name of the group
                parent:
                  type:
                    - integer
                    - 'null'
                  description: 'ID of the parent group, or null'
        description: ''
    delete:
      summary: Delete a group
      tags:
        - groups
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      operationId: delete-group
      description: 'Delete a group. '
  '/roles/{role-id}/users':
    parameters:
      - schema:
          type: string
        name: role-id
        in: path
        required: true
    get:
      summary: List users with role
      tags:
        - roles
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/User.v1.yaml
        '400':
          description: 'Bad Request: Given Role ID may be erroneous'
        '401':
          description: Unauthorized
      operationId: get-roles-users
      description: Gives a list of all the users with the specified role
    post:
      summary: Apply role to user
      operationId: add-role-user
      responses:
        '200':
          description: 'OK: returns the updated list of the users with the role'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
      description: Apply the role to the specified user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
              required:
                - user
        description: Specify the user to apply the role on.
      tags:
        - roles
        - Users
    delete:
      summary: Remove role from a user
      operationId: remove-user-role
      responses:
        '200':
          description: 'OK: returns the updated list of the users with the role'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/User.v1.yaml
      description: Remove the role from the specified user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
              required:
                - user
      tags:
        - Users
        - roles
  /tos:
    get:
      summary: Get the TOS filename and URL
      tags:
        - legal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  update:
                    type: string
                    format: date
                  uri:
                    type: string
                    format: uri
                required:
                  - name
                  - update
                  - uri
            application/xml:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  update:
                    type: string
                    format: date
                    description: The TOS upload date
                  url:
                    type: string
                    format: uri
                required:
                  - filename
                  - update
                  - url
      operationId: get-tos
      description: 'Gives the Terms of Service filename, and the URL to download them.'
      security: []
    post:
      summary: Update the TOS
      tags:
        - legal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  update:
                    type: string
                    format: date
                  uri:
                    type: string
                    format: uri
                required:
                  - filename
                  - update
                  - uri
        '400':
          description: 'Bad Request: File is probably not a PDF'
        '401':
          description: Unauthorized
      operationId: post-tos
      description: 'Replace the current TOS with the given one. Additionally, all users will e requested to accepted the updated TOS on their next login.'
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                tos:
                  type: string
                  format: binary
                  description: The TOS as a PDF
              required:
                - tos
        description: Simply pass the file as a multipart/form-data file input named `tos`.
  '/roles/{role-id}':
    parameters:
      - schema:
          type: string
        name: role-id
        in: path
        required: true
    get:
      summary: Get role infos
      tags:
        - roles
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: ../models/Role.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-role
      description: Get the role infos
    put:
      summary: Update role infos
      operationId: update-role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Role.v1.yaml
        '401':
          description: Unauthorized
      description: "Update the role's name and description."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        description: ''
      tags:
        - roles
    delete:
      summary: Delete role
      operationId: delete-role
      description: Deletes a role. Users with this role applied will loses associated capabilities
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      tags:
        - roles
  '/roles/{role-id}/capabilities':
    parameters:
      - schema:
          type: string
        name: role-id
        in: path
        required: true
    get:
      summary: Get role capabilities
      tags:
        - roles
        - capabilities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Capability.v1.yaml
      operationId: get-roles-capabilities
      description: List all the capabilities of a role
    post:
      summary: Add capability to role
      operationId: add-role-capability
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Capability.v1.yaml
      description: Add the specified capability to the role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                capability:
                  type: integer
      tags:
        - roles
        - capabilities
    put:
      summary: Update capability value in role
      operationId: update-role-capability
      responses:
        '200':
          description: 'OK: Returns the updated capability'
          content:
            application/json:
              schema:
                $ref: ../models/Capability.v1.yaml
      description: Updates the value of a capability of the role.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                capability:
                  type: integer
                value:
                  type:
                    - string
                    - 'null'
                    - number
                    - boolean
      tags:
        - roles
        - capabilities
    delete:
      summary: Remove capability from role
      operationId: delete-role-capabilty
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Capability.v1.yaml
      description: Remove a capability from the role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                capability:
                  type: integer
      tags:
        - roles
        - capabilities
  '/groups/{group-id}/users':
    parameters:
      - schema:
          type: string
        name: group-id
        in: path
        required: true
    get:
      summary: List users in group
      tags:
        - groups
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
      operationId: get-group-users
      description: List all users in the group
    post:
      summary: ''
      operationId: add-group-users
      responses:
        '200':
          description: 'OK: Gives an updated list of users in the group'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
      description: Add a user to the group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
        description: ''
      tags:
        - groups
        - Users
    delete:
      summary: ''
      operationId: remove-group-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/User.v1.yaml
        '401':
          description: Unauthorized
      description: Removes a user from the group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
      tags:
        - groups
        - Users
  /brandings:
    get:
      summary: New branding
      tags:
        - branding
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Branding.v1.yaml
      operationId: get-brandings
      description: List all brandings
    post:
      summary: Create new branding
      operationId: post-brandings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Branding.v1.yaml
      description: Creates a new branding
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      tags:
        - branding
  '/brandings/{branding-id}':
    parameters:
      - schema:
          type: string
        name: branding-id
        in: path
        required: true
    get:
      summary: Get branding infos
      tags:
        - branding
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Branding.v1.yaml
      operationId: get-branding
      description: Give the branding infos
    put:
      summary: Update branding
      operationId: update-branding
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Branding.v1.yaml
        '401':
          description: Unauthorized
      description: 'Updates the branding name, logo, background, etc.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                file:
                  type: string
                  format: binary
        description: ''
      parameters: []
      tags:
        - branding
    delete:
      summary: Delete Branding
      operationId: delete-branding
      description: Deletes the branding and its associated files
      tags:
        - branding
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
  '/users/{user-id}/locations':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
    get:
      summary: "Get user's locations"
      tags:
        - user
        - location
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Location.v1.yaml
      operationId: get-users-location
      description: Gives the list of locations associated with this user
    post:
      summary: ''
      operationId: post-user-locations
      responses:
        '200':
          description: OK
      description: Give the user access to an additional location
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                '':
                  type: integer
      tags:
        - user
        - location
    delete:
      summary: ''
      operationId: delete-user-location
      responses:
        '200':
          description: OK
      description: Remove user access to a location
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: integer
      tags:
        - user
        - location
components:
  schemas:
    Activity:
      title: Activity
      type: object
      properties:
        id:
          type: string
        user:
          type: string
        service:
          type: string
        type:
          type: string
        user_id:
          type: string
        library_id:
          type: string
        ad_id:
          type: string
        campaign_id:
          type: string
        review_id:
          type: string
      description: 'An activity represent an action done by a user and formn an history for each user. Once recorded, an activity cannot be removed'
      x-tags:
        - activities
  securitySchemes:
    neo-auth-sso-token:
      type: http
      scheme: bearer
      description: API Token given by the Neo Auth API
tags:
  - name: users
  - name: capabilities
  - name: activities
  - name: roles
  - name: groups
  - name: legal
  - name: Users
  - name: branding
security:
  - neo-auth-sso-token: []
